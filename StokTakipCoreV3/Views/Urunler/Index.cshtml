@using EntityLayer.Concrete
@model StokTakipCoreV3.Models.ProductsAndStokView
@{
    ViewData["Title"] = "Ürünler";
    Layout = "~/Views/Shared/_UILayout.cshtml";
}


<div class="page-heading">
    <div class="page-title">
        <div class="row">
            <div class="col-12 col-md-6 order-md-1 order-last">
                <h3>Sisteme Kayıtlı Ürünler</h3>
                <p class="text-subtitle text-muted">Bu sayfada sisteme kayıtlı ürünlerin marka modellerini görüntüleyebilir ve yeni ürün ekleyebilirsiniz . </p>
            </div>
            <div class="col-12 col-md-6 order-md-2 order-first">
                <nav aria-label="breadcrumb" class="breadcrumb-header float-start float-lg-end">
                    <ol class="breadcrumb">
                        <button type="button" class="btn btn-info" data-bs-toggle="modal"
                                data-bs-target="#depotransfer">
                            Depo Transfer  <i class="bi bi-arrow-left-right"></i>
                        </button>&nbsp;
                        <form method="post" asp-controller="Urunler" asp-action="ExportToExcel">
                            <button class="btn btn-success">Ürünlerin Excel Çıktısı Al</button>
                        </form>

                    </ol>
                </nav>
            </div>
        </div>
    </div>
    <section class="section">
        <div class="card">
            @*<div class="card-header">

            </div>*@
            <div class="card-body">
                <table class="table table-striped" id="table1">
                    <thead>
                        <tr>
                            <th>Marka</th>
                            <th>Model</th>
                            <th>Stok Sayısı</th>
                            <th>İşlem</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Productss)
                        {
                            <tr>
                                @ViewBag.test
                                <td>@item.ProductsMarka</td>
                                <td>@item.ProductsModel</td>
                                @if (@item.Stoks.Where(x => x.ProductsID == item.ProductsID).Count() < 10)
                                {
                                    <td style="color:red; font-size:20px;">@item.Stoks.Where(x=>x.ProductsID==item.ProductsID).Where(x=>x.OrderID==null).Count() Adet</td>
                                }
                                else
                                {
                                    <td style="color:green; font-size:20px;">@item.Stoks.Where(x=>x.ProductsID==item.ProductsID).Count() Adet</td>
                                }

                                <td> <a role="button" href="/Urunler/UrunGoruntule/@item.ProductsID" class="btn btn-info btn-block">Detay</a></td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-info" data-bs-toggle="modal"
                        data-bs-target="#Urunekle">
                    Ürün Ekle
                </button>
            </div>
        </div>

    </section>
</div>







<!--Modal Start -->
@await Html.PartialAsync("/Views/Urunler/_UrunEkle.cshtml")
@await Html.PartialAsync("/Views/Urunler/_DepoTransfer.cshtml")
<!--Modal End -->
@* ---------------------------Toast Bildirimleri---------------------------------*@

@if (TempData["UrunEkle"] != null)
{


    <script>
        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 1500,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer)
                toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        })

        Toast.fire({
            icon: 'success',
            title: 'Başarılı! Ürün sisteme eklendi.'
        })
    </script>
}
@if (TempData["UrunSil"] != null)
{


    <script>
        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 1500,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer)
                toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        })

        Toast.fire({
            icon: 'success',
            title: 'Başarılı! Ürün sistemen silindi.'
        })
    </script>
}

@if (TempData["depotransfer"] != null)
{


    <script>
        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 1500,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer)
                toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        })

        Toast.fire({
            icon: 'success',
            title: 'Başarılı! Depolar arası transfer tamamlandı.'
        })
    </script>
}
@* -------------------------Toast Bildirimleri Son--------------------------------*@