// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221227055120_mig_add_ordernot")]
    partial class mig_add_ordernot
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityLayer.Concrete.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("EntityLayer.Concrete.History", b =>
                {
                    b.Property<int>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("HistoryFirmaAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistorySiparisAdres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HistoryTarih")
                        .HasColumnType("datetime2");

                    b.Property<string>("HistoryUrunDepo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryUrunMarka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryUrunModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryUrunSn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.HasKey("HistoryID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("OrderID");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("OrderAdres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OrderDurum")
                        .HasColumnType("bit");

                    b.Property<string>("OrderNedeni")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderTarih")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Products", b =>
                {
                    b.Property<int>("ProductsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductsMarka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductsModel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductsID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Stok", b =>
                {
                    b.Property<int>("StokID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int>("ProductsID")
                        .HasColumnType("int");

                    b.Property<string>("StokSn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StokTarih")
                        .HasColumnType("datetime2");

                    b.Property<int>("StoresID")
                        .HasColumnType("int");

                    b.HasKey("StokID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("ProductsID");

                    b.HasIndex("StoresID");

                    b.ToTable("Stoks");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Stores", b =>
                {
                    b.Property<int>("StoresID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StoresName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoresID");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("EntityLayer.Concrete.History", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Company", "Company")
                        .WithMany("Histories")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Order", "Order")
                        .WithMany("Histories")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Order", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Company", "Company")
                        .WithMany("Orders")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Stok", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Company", "Company")
                        .WithMany("Stoks")
                        .HasForeignKey("CompanyID");

                    b.HasOne("EntityLayer.Concrete.Products", "Products")
                        .WithMany("Stoks")
                        .HasForeignKey("ProductsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Stores", "Stores")
                        .WithMany("Stoks")
                        .HasForeignKey("StoresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Products");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Company", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Orders");

                    b.Navigation("Stoks");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Order", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Products", b =>
                {
                    b.Navigation("Stoks");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Stores", b =>
                {
                    b.Navigation("Stoks");
                });
#pragma warning restore 612, 618
        }
    }
}
